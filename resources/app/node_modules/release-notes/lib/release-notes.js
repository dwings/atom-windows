(function() {
  var ReleaseNoteStatusBar, ReleaseNotesView, createReleaseNotesView, deserializer, releaseNotesUri, shell;

  shell = require('shell');

  ReleaseNotesView = null;

  ReleaseNoteStatusBar = require('./release-notes-status-bar');

  releaseNotesUri = 'atom://release-notes';

  createReleaseNotesView = function(uri, version, releaseNotes) {
    if (ReleaseNotesView == null) {
      ReleaseNotesView = require('./release-notes-view');
    }
    return new ReleaseNotesView(uri, version, releaseNotes);
  };

  deserializer = {
    name: 'ReleaseNotesView',
    deserialize: function(_arg) {
      var releaseNotes, releaseVersion, uri;
      uri = _arg.uri, releaseVersion = _arg.releaseVersion, releaseNotes = _arg.releaseNotes;
      return createReleaseNotesView(uri, releaseVersion, releaseNotes);
    }
  };

  atom.deserializers.add(deserializer);

  module.exports = {
    activate: function() {
      var createStatusEntry, previousVersion;
      if (atom.isReleasedVersion()) {
        previousVersion = localStorage.getItem('release-notes:previousVersion');
        localStorage.setItem('release-notes:previousVersion', atom.getVersion());
        atom.workspaceView.on('window:update-available', function(event, version, releaseNotes) {
          localStorage.setItem("release-notes:version", version);
          return localStorage.setItem("release-notes:releaseNotes", releaseNotes);
        });
        atom.workspace.registerOpener(function(filePath) {
          var releaseNotes, version;
          if (filePath !== releaseNotesUri) {
            return;
          }
          version = localStorage.getItem("release-notes:version");
          releaseNotes = localStorage.getItem("release-notes:releaseNotes");
          return createReleaseNotesView(filePath, version, releaseNotes);
        });
        createStatusEntry = function() {
          return new ReleaseNoteStatusBar(previousVersion);
        };
        if (atom.workspaceView.statusBar) {
          createStatusEntry();
        } else {
          atom.packages.once('activated', function() {
            return createStatusEntry();
          });
        }
      }
      return atom.workspaceView.command('release-notes:show', function() {
        if (atom.isReleasedVersion()) {
          return atom.workspaceView.open(releaseNotesUri);
        } else {
          return shell.openExternal('https://atom.io/releases');
        }
      });
    }
  };

}).call(this);
