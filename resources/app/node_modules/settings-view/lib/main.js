(function() {
  var SettingsView, checkForUpdates, configUri, createSettingsView, deserializer, openPanel, settingsView;

  SettingsView = null;

  settingsView = null;

  configUri = 'atom://config';

  createSettingsView = function(params) {
    if (SettingsView == null) {
      SettingsView = require('./settings-view');
    }
    return settingsView = new SettingsView(params);
  };

  openPanel = function(panelName) {
    atom.workspaceView.open(configUri);
    return settingsView.showPanel(panelName);
  };

  deserializer = {
    name: 'SettingsView',
    version: 2,
    deserialize: function(state) {
      if (state.constructor === Object) {
        return createSettingsView(state);
      }
    }
  };

  atom.deserializers.add(deserializer);

  module.exports = {
    activate: function() {
      atom.workspace.registerOpener(function(uri) {
        if (uri === configUri) {
          return createSettingsView({
            uri: uri
          });
        }
      });
      atom.workspaceView.command('settings-view:open', function() {
        return openPanel('General');
      });
      atom.workspaceView.command('settings-view:show-keybindings', function() {
        return openPanel('Keybindings');
      });
      atom.workspaceView.command('settings-view:change-themes', function() {
        return openPanel('Themes');
      });
      atom.workspaceView.command('settings-view:install-themes', function() {
        return openPanel('Themes');
      });
      atom.workspaceView.command('settings-view:install-packages', function() {
        return openPanel('Packages');
      });
      atom.workspaceView.command('settings-view:uninstall-themes', function() {
        return atom.workspaceView.open(configUri);
      });
      atom.workspaceView.command('settings-view:uninstall-packages', function() {
        return atom.workspaceView.open(configUri);
      });
      atom.workspaceView.on('pane-container:active-pane-item-changed', function() {
        if (settingsView === atom.workspace.getActivePaneItem()) {
          return settingsView != null ? settingsView.redrawEditors() : void 0;
        }
      });
      return atom.packages.once('activated', checkForUpdates);
    }
  };

  checkForUpdates = function() {
    var PackageManager, packageManager, _ref;
    if (((_ref = atom.workspaceView) != null ? _ref.statusBar : void 0) != null) {
      PackageManager = require('./package-manager');
      packageManager = new PackageManager();
      return packageManager.getOutdated().then(function(packages) {
        var PackageUpdatesStatusView, packageUpdatesStatusView;
        if (packages.length > 0) {
          PackageUpdatesStatusView = require('./package-updates-status-view');
          return packageUpdatesStatusView = new PackageUpdatesStatusView(atom.workspaceView.statusBar, packages);
        }
      });
    }
  };

}).call(this);
