(function() {
  var BracketMatcher, Subscriber, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-plus');

  Subscriber = require('emissary').Subscriber;

  module.exports = BracketMatcher = (function() {
    Subscriber.includeInto(BracketMatcher);

    BracketMatcher.prototype.defaultPairs = {
      '(': ')',
      '[': ']',
      '{': '}',
      '"': '"',
      "'": "'",
      '`': '`'
    };

    BracketMatcher.prototype.smartQuotePairs = {
      "“": "”",
      '‘': '’',
      "«": "»",
      "‹": "›"
    };

    BracketMatcher.prototype.toggleQuotes = function(includeSmartQuotes) {
      if (includeSmartQuotes) {
        return this.pairedCharacters = _.extend(this.defaultPairs, this.smartQuotePairs);
      } else {
        return this.pairedCharacters = this.defaultPairs;
      }
    };

    function BracketMatcher(editorView) {
      this.backspace = __bind(this.backspace, this);
      this.insertNewline = __bind(this.insertNewline, this);
      this.insertText = __bind(this.insertText, this);
      this.editor = editorView.editor;
      this.bracketMarkers = [];
      _.adviseBefore(this.editor, 'insertText', this.insertText);
      _.adviseBefore(this.editor, 'insertNewline', this.insertNewline);
      _.adviseBefore(this.editor, 'backspace', this.backspace);
      this.subscribe(editorView.command('bracket-matcher:remove-brackets-from-selection', (function(_this) {
        return function(event) {
          if (!_this.removeBrackets()) {
            return event.abortKeyBinding();
          }
        };
      })(this)));
      this.subscribe(atom.config.observe('bracket-matcher.autocompleteSmartQuotes', (function(_this) {
        return function(newValue) {
          return _this.toggleQuotes(newValue);
        };
      })(this)));
      this.subscribe(this.editor, 'destroyed', (function(_this) {
        return function() {
          return _this.unsubscribe();
        };
      })(this));
    }

    BracketMatcher.prototype.insertText = function(text, options) {
      var autoCompleteOpeningBracket, bracketMarker, cursorBufferPosition, hasQuoteBeforeCursor, hasWordAfterCursor, hasWordBeforeCursor, nextCharacter, previousCharacter, range, skipOverExistingClosingBracket;
      if ((options != null ? options.select : void 0) || (options != null ? options.undo : void 0) === 'skip') {
        return true;
      }
      if (this.isOpeningBracket(text) && this.wrapSelectionInBrackets(text)) {
        return false;
      }
      if (this.editor.hasMultipleCursors()) {
        return true;
      }
      cursorBufferPosition = this.editor.getCursorBufferPosition();
      previousCharacter = this.editor.getTextInBufferRange([cursorBufferPosition.add([0, -1]), cursorBufferPosition]);
      nextCharacter = this.editor.getTextInBufferRange([cursorBufferPosition, cursorBufferPosition.add([0, 1])]);
      hasWordAfterCursor = /\w/.test(nextCharacter);
      hasWordBeforeCursor = /\w/.test(previousCharacter);
      hasQuoteBeforeCursor = previousCharacter === text[0];
      autoCompleteOpeningBracket = atom.config.get('bracket-matcher.autocompleteBrackets') && this.isOpeningBracket(text) && !hasWordAfterCursor && !(this.isQuote(text) && (hasWordBeforeCursor || hasQuoteBeforeCursor));
      skipOverExistingClosingBracket = false;
      if (this.isClosingBracket(text) && nextCharacter === text) {
        if (bracketMarker = _.find(this.bracketMarkers, (function(_this) {
          return function(marker) {
            return marker.isValid() && marker.getBufferRange().end.isEqual(cursorBufferPosition);
          };
        })(this))) {
          skipOverExistingClosingBracket = true;
        }
      }
      if (skipOverExistingClosingBracket) {
        bracketMarker.destroy();
        _.remove(this.bracketMarkers, bracketMarker);
        this.editor.moveCursorRight();
        return false;
      } else if (autoCompleteOpeningBracket) {
        this.editor.insertText(text + this.pairedCharacters[text]);
        this.editor.moveCursorLeft();
        range = [cursorBufferPosition, cursorBufferPosition.add([0, text.length])];
        this.bracketMarkers.push(this.editor.markBufferRange(range));
        return false;
      }
    };

    BracketMatcher.prototype.insertNewline = function() {
      var cursorBufferPosition, nextCharacter, previousCharacter;
      if (this.editor.hasMultipleCursors()) {
        return;
      }
      if (!this.editor.getSelection().isEmpty()) {
        return;
      }
      cursorBufferPosition = this.editor.getCursorBufferPosition();
      previousCharacter = this.editor.getTextInBufferRange([cursorBufferPosition.add([0, -1]), cursorBufferPosition]);
      nextCharacter = this.editor.getTextInBufferRange([cursorBufferPosition, cursorBufferPosition.add([0, 1])]);
      if (this.pairedCharacters[previousCharacter] === nextCharacter) {
        this.editor.transact((function(_this) {
          return function() {
            var cursorRow;
            _this.editor.insertText("\n\n");
            _this.editor.moveCursorUp();
            cursorRow = _this.editor.getCursorBufferPosition().row;
            return _this.editor.autoIndentBufferRows(cursorRow, cursorRow + 1);
          };
        })(this));
        return false;
      }
    };

    BracketMatcher.prototype.backspace = function() {
      var cursorBufferPosition, nextCharacter, previousCharacter;
      if (this.editor.hasMultipleCursors()) {
        return;
      }
      if (!this.editor.getSelection().isEmpty()) {
        return;
      }
      cursorBufferPosition = this.editor.getCursorBufferPosition();
      previousCharacter = this.editor.getTextInBufferRange([cursorBufferPosition.add([0, -1]), cursorBufferPosition]);
      nextCharacter = this.editor.getTextInBufferRange([cursorBufferPosition, cursorBufferPosition.add([0, 1])]);
      if (this.pairedCharacters[previousCharacter] === nextCharacter) {
        this.editor.transact((function(_this) {
          return function() {
            _this.editor.moveCursorLeft();
            _this.editor["delete"]();
            return _this.editor["delete"]();
          };
        })(this));
        return false;
      }
    };

    BracketMatcher.prototype.removeBrackets = function() {
      var bracketsRemoved;
      bracketsRemoved = false;
      this.editor.mutateSelectedText((function(_this) {
        return function(selection) {
          var options, range, selectionEnd, selectionStart, text;
          if (!_this.selectionIsWrappedByMatchingBrackets(selection)) {
            return;
          }
          range = selection.getBufferRange();
          options = {
            isReversed: selection.isReversed()
          };
          selectionStart = range.start;
          if (range.start.row === range.end.row) {
            selectionEnd = range.end.add([0, -2]);
          } else {
            selectionEnd = range.end.add([0, -1]);
          }
          text = selection.getText();
          selection.insertText(text.substring(1, text.length - 1));
          selection.setBufferRange([selectionStart, selectionEnd], options);
          return bracketsRemoved = true;
        };
      })(this));
      return bracketsRemoved;
    };

    BracketMatcher.prototype.wrapSelectionInBrackets = function(bracket) {
      var pair, selectionWrapped;
      if (!atom.config.get('bracket-matcher.wrapSelectionsInBrackets')) {
        return false;
      }
      pair = this.pairedCharacters[bracket];
      selectionWrapped = false;
      this.editor.mutateSelectedText(function(selection) {
        var options, range, selectionEnd, selectionStart;
        if (selection.isEmpty()) {
          return;
        }
        selectionWrapped = true;
        range = selection.getBufferRange();
        options = {
          isReversed: selection.isReversed()
        };
        selection.insertText("" + bracket + (selection.getText()) + pair);
        selectionStart = range.start.add([0, 1]);
        if (range.start.row === range.end.row) {
          selectionEnd = range.end.add([0, 1]);
        } else {
          selectionEnd = range.end;
        }
        return selection.setBufferRange([selectionStart, selectionEnd], options);
      });
      return selectionWrapped;
    };

    BracketMatcher.prototype.isQuote = function(string) {
      return /['"`]/.test(string);
    };

    BracketMatcher.prototype.getInvertedPairedCharacters = function() {
      var close, open, _ref;
      if (this.invertedPairedCharacters) {
        return this.invertedPairedCharacters;
      }
      this.invertedPairedCharacters = {};
      _ref = this.pairedCharacters;
      for (open in _ref) {
        close = _ref[open];
        this.invertedPairedCharacters[close] = open;
      }
      return this.invertedPairedCharacters;
    };

    BracketMatcher.prototype.isOpeningBracket = function(string) {
      return this.pairedCharacters.hasOwnProperty(string);
    };

    BracketMatcher.prototype.isClosingBracket = function(string) {
      return this.getInvertedPairedCharacters().hasOwnProperty(string);
    };

    BracketMatcher.prototype.selectionIsWrappedByMatchingBrackets = function(selection) {
      var firstCharacter, lastCharacter, selectedText;
      if (selection.isEmpty()) {
        return false;
      }
      selectedText = selection.getText();
      firstCharacter = selectedText[0];
      lastCharacter = selectedText[selectedText.length - 1];
      return this.pairedCharacters[firstCharacter] === lastCharacter;
    };

    return BracketMatcher;

  })();

}).call(this);
