(function() {
  var BracketMatcherView, Range, TagFinder, View, endPair, endPairMatches, pairRegexes, startPair, startPairMatches, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  _ref = require('atom'), Range = _ref.Range, View = _ref.View;

  TagFinder = require('./tag-finder');

  startPairMatches = {
    '(': ')',
    '[': ']',
    '{': '}'
  };

  endPairMatches = {
    ')': '(',
    ']': '[',
    '}': '{'
  };

  pairRegexes = {};

  for (startPair in startPairMatches) {
    endPair = startPairMatches[startPair];
    pairRegexes[startPair] = new RegExp("[" + (_.escapeRegExp(startPair + endPair)) + "]", 'g');
  }

  module.exports = BracketMatcherView = (function(_super) {
    __extends(BracketMatcherView, _super);

    function BracketMatcherView() {
      return BracketMatcherView.__super__.constructor.apply(this, arguments);
    }

    BracketMatcherView.content = function() {
      return this.div((function(_this) {
        return function() {
          _this.div({
            "class": 'bracket-matcher',
            style: 'display: none',
            outlet: 'startView'
          });
          return _this.div({
            "class": 'bracket-matcher',
            style: 'display: none',
            outlet: 'endView'
          });
        };
      })(this));
    };

    BracketMatcherView.prototype.initialize = function(editorView) {
      this.editorView = editorView;
      this.editor = this.editorView.editor;
      this.tagFinder = new TagFinder(this.editor);
      this.pairHighlighted = false;
      this.updateHighlights = false;
      this.subscribe(atom.config.observe('editor.fontSize', (function(_this) {
        return function() {
          return _this.updateMatch();
        };
      })(this)));
      this.subscribe(this.editor.getBuffer(), 'changed', (function(_this) {
        return function() {
          return _this.updateHighlights = true;
        };
      })(this));
      this.subscribe(this.editorView, 'editor:display-updated', (function(_this) {
        return function() {
          if (_this.updateHighlights) {
            _this.updateHighlights = false;
            return _this.updateMatch();
          }
        };
      })(this));
      this.subscribe(this.editorView, 'editor:min-width-changed', (function(_this) {
        return function() {
          if (_this.editor.getSoftWrap()) {
            return _this.updateHighlights = true;
          }
        };
      })(this));
      this.subscribe(this.editor, 'soft-wrap-changed', (function(_this) {
        return function() {
          return _this.updateHighlights = true;
        };
      })(this));
      this.subscribe(this.editor, 'grammar-changed', (function(_this) {
        return function() {
          return _this.updateHighlights = true;
        };
      })(this));
      this.subscribeToCursor();
      this.subscribeToCommand(this.editorView, 'bracket-matcher:go-to-matching-bracket', (function(_this) {
        return function() {
          return _this.goToMatchingPair();
        };
      })(this));
      this.subscribeToCommand(this.editorView, 'bracket-matcher:go-to-enclosing-bracket', (function(_this) {
        return function() {
          return _this.goToEnclosingPair();
        };
      })(this));
      this.subscribeToCommand(this.editorView, 'bracket-matcher:select-inside-brackets', (function(_this) {
        return function() {
          return _this.selectInsidePair();
        };
      })(this));
      this.editorView.underlayer.append(this);
      return this.updateMatch();
    };

    BracketMatcherView.prototype.subscribeToCursor = function() {
      var cursor;
      cursor = this.editor.getCursor();
      if (cursor == null) {
        return;
      }
      this.subscribe(cursor, 'moved', (function(_this) {
        return function() {
          return _this.updateMatch();
        };
      })(this));
      return this.subscribe(cursor, 'destroyed', (function(_this) {
        return function() {
          _this.unsubscribe(cursor);
          _this.subscribeToCursor();
          if (_this.editor.isAlive()) {
            return _this.updateMatch();
          }
        };
      })(this));
    };

    BracketMatcherView.prototype.updateMatch = function() {
      var currentPair, matchPosition, matchingPair, pair, position, _ref1, _ref2;
      if (this.pairHighlighted) {
        this.startView.hide();
        this.endView.hide();
      }
      this.pairHighlighted = false;
      if (!this.editor.getSelection().isEmpty()) {
        return;
      }
      if (this.editor.isFoldedAtCursorRow()) {
        return;
      }
      _ref1 = this.findCurrentPair(startPairMatches), position = _ref1.position, currentPair = _ref1.currentPair, matchingPair = _ref1.matchingPair;
      if (position) {
        matchPosition = this.findMatchingEndPair(position, currentPair, matchingPair);
      } else {
        _ref2 = this.findCurrentPair(endPairMatches), position = _ref2.position, currentPair = _ref2.currentPair, matchingPair = _ref2.matchingPair;
        if (position) {
          matchPosition = this.findMatchingStartPair(position, matchingPair, currentPair);
        }
      }
      if ((position != null) && (matchPosition != null)) {
        this.moveStartView([position, position.translate([0, 1])]);
        this.moveEndView([matchPosition, matchPosition.translate([0, 1])]);
        return this.pairHighlighted = true;
      } else {
        if (pair = this.tagFinder.findMatchingTags()) {
          this.moveStartView(pair.startRange);
          this.moveEndView(pair.endRange);
          return this.pairHighlighted = true;
        }
      }
    };

    BracketMatcherView.prototype.findMatchingEndPair = function(startPairPosition, startPair, endPair) {
      var endPairPosition, scanRange, unpairedCount;
      scanRange = new Range(startPairPosition.translate([0, 1]), this.editor.buffer.getEndPosition());
      endPairPosition = null;
      unpairedCount = 0;
      this.editor.scanInBufferRange(pairRegexes[startPair], scanRange, function(_arg) {
        var match, range, stop;
        match = _arg.match, range = _arg.range, stop = _arg.stop;
        switch (match[0]) {
          case startPair:
            return unpairedCount++;
          case endPair:
            unpairedCount--;
            if (unpairedCount < 0) {
              endPairPosition = range.start;
              return stop();
            }
        }
      });
      return endPairPosition;
    };

    BracketMatcherView.prototype.findMatchingStartPair = function(endPairPosition, startPair, endPair) {
      var scanRange, startPairPosition, unpairedCount;
      scanRange = new Range([0, 0], endPairPosition);
      startPairPosition = null;
      unpairedCount = 0;
      this.editor.backwardsScanInBufferRange(pairRegexes[startPair], scanRange, function(_arg) {
        var match, range, stop;
        match = _arg.match, range = _arg.range, stop = _arg.stop;
        switch (match[0]) {
          case startPair:
            unpairedCount--;
            if (unpairedCount < 0) {
              startPairPosition = range.start;
              return stop();
            }
            break;
          case endPair:
            return unpairedCount++;
        }
      });
      return startPairPosition;
    };

    BracketMatcherView.prototype.findAnyStartPair = function(cursorPosition) {
      var combinedRegExp, endPairRegExp, scanRange, startPairRegExp, startPosition, unpairedCount;
      scanRange = new Range([0, 0], cursorPosition);
      startPair = _.escapeRegExp(_.keys(startPairMatches).join(''));
      endPair = _.escapeRegExp(_.keys(endPairMatches).join(''));
      combinedRegExp = new RegExp("[" + startPair + endPair + "]", 'g');
      startPairRegExp = new RegExp("[" + startPair + "]", 'g');
      endPairRegExp = new RegExp("[" + endPair + "]", 'g');
      startPosition = null;
      unpairedCount = 0;
      this.editor.backwardsScanInBufferRange(combinedRegExp, scanRange, (function(_this) {
        return function(_arg) {
          var match, range, stop;
          match = _arg.match, range = _arg.range, stop = _arg.stop;
          if (match[0].match(endPairRegExp)) {
            return unpairedCount++;
          } else if (match[0].match(startPairRegExp)) {
            unpairedCount--;
            startPosition = range.start;
            if (unpairedCount < 0) {
              return stop();
            }
          }
        };
      })(this));
      return startPosition;
    };

    BracketMatcherView.prototype.moveHighlightView = function(view, bufferRange) {
      var element, endPixelPosition, startPixelPosition;
      bufferRange = Range.fromObject(bufferRange);
      view.bufferPosition = bufferRange.start;
      startPixelPosition = this.editorView.pixelPositionForBufferPosition(bufferRange.start);
      endPixelPosition = this.editorView.pixelPositionForBufferPosition(bufferRange.end);
      element = view[0];
      element.style.display = 'block';
      element.style.top = "" + startPixelPosition.top + "px";
      element.style.left = "" + startPixelPosition.left + "px";
      element.style.width = "" + (endPixelPosition.left - startPixelPosition.left) + "px";
      return element.style.height = "" + this.editorView.lineHeight + "px";
    };

    BracketMatcherView.prototype.moveStartView = function(bufferRange) {
      return this.moveHighlightView(this.startView, bufferRange);
    };

    BracketMatcherView.prototype.moveEndView = function(bufferRange) {
      return this.moveHighlightView(this.endView, bufferRange);
    };

    BracketMatcherView.prototype.findCurrentPair = function(matches) {
      var currentPair, matchingPair, position;
      position = this.editor.getCursorBufferPosition();
      currentPair = this.editor.getTextInRange(Range.fromPointWithDelta(position, 0, 1));
      if (!matches[currentPair]) {
        position = position.translate([0, -1]);
        currentPair = this.editor.getTextInRange(Range.fromPointWithDelta(position, 0, 1));
      }
      if (matchingPair = matches[currentPair]) {
        return {
          position: position,
          currentPair: currentPair,
          matchingPair: matchingPair
        };
      } else {
        return {};
      }
    };

    BracketMatcherView.prototype.goToMatchingPair = function() {
      var endPosition, position, previousPosition, startPosition;
      if (!this.pairHighlighted) {
        return this.goToEnclosingPair();
      }
      if (!this.editorView.underlayer.isVisible()) {
        return;
      }
      position = this.editor.getCursorBufferPosition();
      previousPosition = position.translate([0, -1]);
      startPosition = this.startView.bufferPosition;
      endPosition = this.endView.bufferPosition;
      if (position.isEqual(startPosition)) {
        return this.editor.setCursorBufferPosition(endPosition.translate([0, 1]));
      } else if (previousPosition.isEqual(startPosition)) {
        return this.editor.setCursorBufferPosition(endPosition);
      } else if (position.isEqual(endPosition)) {
        return this.editor.setCursorBufferPosition(startPosition.translate([0, 1]));
      } else if (previousPosition.isEqual(endPosition)) {
        return this.editor.setCursorBufferPosition(startPosition);
      }
    };

    BracketMatcherView.prototype.goToEnclosingPair = function() {
      var matchPosition, position;
      if (this.pairHighlighted) {
        return;
      }
      if (!this.editorView.underlayer.isVisible()) {
        return;
      }
      position = this.editor.getCursorBufferPosition();
      matchPosition = this.findAnyStartPair(position);
      if (matchPosition) {
        return this.editor.setCursorBufferPosition(matchPosition);
      }
    };

    BracketMatcherView.prototype.selectInsidePair = function() {
      var endPosition, rangeToSelect, startPosition;
      if (!this.editorView.underlayer.isVisible()) {
        return;
      }
      if (this.pairHighlighted) {
        startPosition = this.startView.bufferPosition;
        endPosition = this.endView.bufferPosition;
      } else {
        if (startPosition = this.findAnyStartPair(this.editor.getCursorBufferPosition())) {
          startPair = this.editor.getTextInRange(Range.fromPointWithDelta(startPosition, 0, 1));
          endPosition = this.findMatchingEndPair(startPosition, startPair, startPairMatches[startPair]);
        }
      }
      if ((startPosition != null) && (endPosition != null)) {
        rangeToSelect = new Range(startPosition, endPosition).translate([0, 1], [0, 0]);
        return this.editor.setSelectedBufferRange(rangeToSelect);
      }
    };

    return BracketMatcherView;

  })(View);

}).call(this);
