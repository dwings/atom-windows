{
  "name": "scoped-property-store",
  "version": "0.9.0",
  "description": "Store and retrieve properties associated with CSS selectors.",
  "main": "./lib/scoped-property-store",
  "scripts": {
    "prepublish": "grunt clean lint coffee",
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/atom/scoped-property-store.git"
  },
  "bugs": {
    "url": "https://github.com/atom/scoped-property-store/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/scoped-property-store/raw/master/LICENSE.md"
    }
  ],
  "dependencies": {
    "slick": "git://github.com/atom/slick.git#452d7da5b1fb7aea0f0307ff0f670f72eb521d15",
    "underscore-plus": "^1.1.1"
  },
  "devDependencies": {
    "coffee-script": "^1.7.0",
    "jasmine-focused": "^1.0.4",
    "grunt-contrib-coffee": "^0.9.0",
    "grunt-cli": "^0.1.8",
    "grunt": "^0.4.1",
    "grunt-shell": "^0.2.2",
    "grunt-coffeelint": "^0.0.6",
    "rimraf": "^2.2.2",
    "coffee-cache": "^0.2.0",
    "temp": "^0.6.0"
  },
  "readme": "# Scoped Property Store [![Build Status](https://travis-ci.org/atom/scoped-property-store.svg?branch=master)](https://travis-ci.org/atom/scoped-property-store)\n\nStores and retrieves properties associated with CSS selectors.\n\nCurrently, this library only supports the combinations of the following\nelements. More could be added pretty easily.\n\n* Element names: `div`\n* Class names: `.foo`\n* Simple attributes: `[foo=bar]`\n* Descendant selectors: `.foo .bar`\n* Child selectors: `.foo > .bar`\n\nUsage:\n\n```coffee\nScopedPropertyScore = require 'scoped-property-store'\nstore = new ScopedPropertyScore\n\n# First associate some properties with selectors\nstore.addProperties 'some-description',\n  '.foo.bar .baz':\n    x:\n      y: 1\n      z: 2\n\n  '.foo':\n    x:\n      y: 3\n\n# Then query properties based on a string description of a path in the DOM.\nstore.get('div.foo.bar p.baz', 'x.y') # ==> 1\nstore.get('div.foo.bar p.baz', 'x.z') # ==> 2\n\n# Falls back to selectors matching an *ancestor* if necessary\nstore.get('div.foo p.baz', 'x.y') # ==> 3\n\n\n# You can also remove properties via their `source` description\nstore.removeProperties('some-description')\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/atom/scoped-property-store",
  "_id": "scoped-property-store@0.9.0",
  "dist": {
    "shasum": "e35a1f73a6e185505595d0d735225cd76478a8fa"
  },
  "_from": "scoped-property-store@^0.9.0",
  "_resolved": "https://registry.npmjs.org/scoped-property-store/-/scoped-property-store-0.9.0.tgz"
}
