(function() {
  var BackgroundTipsView, Tips, View, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  View = require('atom').View;

  Tips = require('./tips');

  module.exports = BackgroundTipsView = (function(_super) {
    __extends(BackgroundTipsView, _super);

    function BackgroundTipsView() {
      this.showNextTip = __bind(this.showNextTip, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      return BackgroundTipsView.__super__.constructor.apply(this, arguments);
    }

    BackgroundTipsView.startDelay = 1000;

    BackgroundTipsView.displayDuration = 10000;

    BackgroundTipsView.fadeDuration = 300;

    BackgroundTipsView.content = function() {
      return this.ul({
        "class": 'background-tips centered background-message'
      }, (function(_this) {
        return function() {
          return _this.li({
            outlet: 'message'
          });
        };
      })(this));
    };

    BackgroundTipsView.prototype.initialize = function() {
      this.index = -1;
      atom.workspaceView.on('pane-container:active-pane-item-changed pane:attached pane:removed', (function(_this) {
        return function() {
          return _this.updateVisibility();
        };
      })(this));
      return setTimeout(this.start, this.constructor.startDelay);
    };

    BackgroundTipsView.prototype.attach = function() {
      var paneView, top, _ref, _ref1;
      paneView = atom.workspaceView.getActivePaneView();
      top = (_ref = (_ref1 = paneView.children('.item-views').position()) != null ? _ref1.top : void 0) != null ? _ref : 0;
      this.css('top', top);
      return paneView.append(this);
    };

    BackgroundTipsView.prototype.updateVisibility = function() {
      if (this.shouldBeAttached()) {
        return this.start();
      } else {
        return this.stop();
      }
    };

    BackgroundTipsView.prototype.shouldBeAttached = function() {
      return atom.workspaceView.getPaneViews().length === 1 && (atom.workspace.getActivePaneItem() == null);
    };

    BackgroundTipsView.prototype.start = function() {
      if (!this.shouldBeAttached() || (this.interval != null)) {
        return;
      }
      this.renderTips();
      this.randomizeIndex();
      this.message.hide();
      this.attach();
      this.showNextTip();
      return this.interval = setInterval(this.showNextTip, this.constructor.displayDuration);
    };

    BackgroundTipsView.prototype.stop = function() {
      this.detach();
      if (this.interval != null) {
        clearInterval(this.interval);
      }
      return this.interval = null;
    };

    BackgroundTipsView.prototype.randomizeIndex = function() {
      var len;
      len = Tips.length;
      return this.index = Math.round(Math.random() * len) % len;
    };

    BackgroundTipsView.prototype.showNextTip = function() {
      this.index = ++this.index % Tips.length;
      return this.message.fadeOut(this.constructor.fadeDuration, (function(_this) {
        return function() {
          _this.message.html(Tips[_this.index]);
          return _this.message.fadeIn(_this.constructor.fadeDuration);
        };
      })(this));
    };

    BackgroundTipsView.prototype.renderTips = function() {
      var i, tip, _i, _len;
      if (this.tipsRendered) {
        return;
      }
      for (i = _i = 0, _len = Tips.length; _i < _len; i = ++_i) {
        tip = Tips[i];
        Tips[i] = this.renderTip(tip);
      }
      return this.tipsRendered = true;
    };

    BackgroundTipsView.prototype.renderTip = function(str) {
      str = str.replace(/\{(.+)\}/g, (function(_this) {
        return function(match, command) {
          var binding, bindings, scope, scopeAndCommand, _i, _len;
          scopeAndCommand = command.split('>');
          if (scopeAndCommand.length > 1) {
            scope = scopeAndCommand[0], command = scopeAndCommand[1];
          }
          bindings = atom.keymap.findKeyBindings({
            command: command.trim()
          });
          if (scope) {
            for (_i = 0, _len = bindings.length; _i < _len; _i++) {
              binding = bindings[_i];
              if (binding.selector === scope) {
                break;
              }
            }
          } else {
            binding = _this.getKeyBindingForCurrentPlatform(bindings);
          }
          if (binding != null) {
            return "<span class=\"keystroke\">" + (_.humanizeKeystroke(binding.keystrokes)) + "</span>";
          } else {
            return command;
          }
        };
      })(this));
      return str;
    };

    BackgroundTipsView.prototype.getKeyBindingForCurrentPlatform = function(bindings) {
      var binding, _i, _len;
      if (!(bindings != null ? bindings.length : void 0)) {
        return;
      }
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        binding = bindings[_i];
        if (binding.selector.indexOf(process.platform) !== -1) {
          return binding;
        }
      }
      return bindings[0];
    };

    return BackgroundTipsView;

  })(View);

}).call(this);
