(function() {
  var DeprecationCopView, Grim, WorkspaceView;

  WorkspaceView = require('atom').WorkspaceView;

  Grim = require('grim');

  DeprecationCopView = require('../lib/deprecation-cop-view');

  describe("DeprecationCopView", function() {
    var activationPromise, deprecatedMethod, _ref;
    _ref = [], deprecatedMethod = _ref[0], activationPromise = _ref[1];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      activationPromise = atom.packages.activatePackage('deprecation-cop');
      deprecatedMethod = function() {
        return Grim.deprecate("This isn't used");
      };
      deprecatedMethod();
      atom.workspaceView.trigger('deprecation-cop:view');
      return waitsForPromise(function() {
        return activationPromise;
      });
    });
    return it("displays deprecated methods", function() {
      var timeCopView;
      timeCopView = atom.workspace.getActivePane().getActiveItem();
      expect(timeCopView.html()).toMatch(/deprecation-cop package/);
      return expect(timeCopView.html()).toMatch(/This isn't used/);
    });
  });

}).call(this);
